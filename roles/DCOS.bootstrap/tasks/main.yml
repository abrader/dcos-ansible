---
# This playbook generates the DC/OS installation/configuration files
- name: Defining DC/OS by using 'version' or, more specifically, 'image_commit'
  set_fact:
     dcos_version_specifier: "{{ dcos['image_commit'] | default(dcos['version']) }}"

- name: "Finding the provider / environment running on (AWS or, if nothing detected, on premise)"
  # 4th gen or earlier, Xen based types:
  #   looking at `product_version` or `bios_verion`.
  # 5th gen HVM based instance types:
  #   looking at `system_vendor`.
  set_fact:
    dcos_environment: >-
        {{
        (('amazon' in ansible_product_version) or
        ('amazon' in ansible_bios_version) or
        ('EC2' in ansible_system_vendor))
        | ternary('ec2', 'onprem')
        }}
  changed_when: false

- name: Double check the prefix/cluster name and version
  pause:
    prompt: |
        Please double check the prefix/cluster name and version of this cluster:

          Cluster: {{ dcos['config']['cluster_name'] }}
          Version: {{ dcos['version_to_upgrade_from'] | default("None") }} -> {{ dcos['version'] }}
          Commit:  {{ dcos['image_commit'] | default("None") }}
          via:     {{ dcos['download'] }}

        PRESS *ENTER* OR CANCEL NOW IF IT ISN'T CORRECT
  when: dcos_cluster_name_confirmed is not defined
  register: dcos_cluster_name_confirmed
  no_log: true

# PRE DOWNLOAD vvv

- name: Install pip to install python-docker
  yum:
    name: python-pip
    state: present
  register: dcos_yum_pythonpip_install
  retries: 3
  delay: 60
  until: dcos_yum_pythonpip_install is success

- name: Install python docker bindings
  pip:
    name: docker
    state: present
  register: dcos_pip_docker_install
  retries: 3
  delay: 60
  until: dcos_pip_docker_install is success

- name: Setting download dir
  set_fact:
     download_path: "{{ download_base_dir }}/{{ dcos_version_specifier }}"
     install_file: "{{ dcos['download']|basename }}"

- name: Create install directory/genconf
  file: path={{ download_path }}/genconf state=directory mode=0755

#  vvv DOWNLOAD vvv

# - name: Download installation file
#   get_url:
#     url: "{{ dcos['download'] }}"
#     dest: "{{ download_path }}/{{ install_file }}"
#     mode: 0440

- name: Copy installation file
  copy:
    src: "{{ dcos['download'] }}"
    dest: "{{ download_path }}/{{ install_file }}"
    mode: 0440


# vvv POST DOWNLOAD / configuration vvv

- name: "Set default IP detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect.j2"
    dest: "{{ download_path }}/genconf/ip-detect"
    mode: 0644
  when: "dcos.config.ip_detect_contents is not defined"
  notify: trigger_new_config

- name: "Set default public IP detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_public_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect-public.j2"
    dest: "{{ download_path }}/genconf/ip-detect-public"
    mode: 0644
  when: "dcos.config.ip_detect_public_contents is not defined"
  notify: trigger_new_config

- name: "Set default fault domain detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.fault_domain_detect_contents`)"
  template:
    src: "{{ dcos_environment }}/fault-domain-detect.sh.j2"
    dest: "{{ download_path }}/genconf/fault-domain-detect"
    mode: 0644
  when: "dcos.config.fault_domain_detect_contents is not defined"
  notify: trigger_new_config

- name: "Place the license.txt file in the genconf directory (EE Only)"
  copy:
    src: "{{ dcos['license_file'] }}"
    dest: "{{ download_path }}/genconf/license.txt"
    mode: 0644
  when: dcos['enterprise_dcos'] and dcos['license_file']

- name: Generate DC/OS configuration
  template:
    src: "config.yaml.j2"
    dest: "{{ download_path }}/genconf/config.yaml"
    mode: 0644
  notify: trigger_new_config

- name: Flush handler now
  meta: flush_handlers

# vvv GENERATE INSTALLER vvv

- name: Generate DC/OS bootstrap files
  command: "bash {{ install_file }}"
  args:
    chdir: "{{ download_path }}"
    creates: "{{ download_path }}/genconf/serve/dcos_install.sh"

# vvv GENERATE UPGRADE SCRIPTS vvv
- name: Generate DC/OS upgrade files
  shell: >
    bash {{ install_file }} --generate-node-upgrade-script {{ item }};
    mv genconf/serve/upgrade genconf/serve/upgrade_from_{{ item }}
  args:
    warn: false
    chdir: "{{ download_path }}"
    creates: "{{ download_path }}/genconf/serve/upgrade_from_{{ item }}/"
  when: "dcos['version'] is version('1.9', '>=')"
  loop: >
    {{ groups['dcos'] | default([]) | map('extract',hostvars,'ansible_local')| list |
     select('defined') | selectattr('dcos_installation', 'defined') |
     map(attribute='dcos_installation') | map(attribute='version') | list |
     union([dcos['version_to_upgrade_from'] | default(dcos['version']) ]) | unique }}

- name: Get upgrade directory hash
  shell: "ls -td -- */ | head -n 1 | cut -d'/' -f1"
  args:
    chdir: "{{ download_path }}/genconf/serve/upgrade_from_{{ item }}"
  changed_when: false
  register: upgrade_dir_hash
  when: "dcos['version'] is version('1.9', '>=')"
  loop: >
    {{ groups['dcos'] | default([]) | map('extract',hostvars,'ansible_local')| list |
     select('defined') | selectattr('dcos_installation', 'defined') |
     map(attribute='dcos_installation') | map(attribute='version') | list |
     union([dcos['version_to_upgrade_from'] | default(dcos['version']) ]) | unique }}

- name: Create latest/ symlink for upgrade.sh
  file:
    path: "{{ download_path }}/genconf/serve/upgrade_from_{{ item.item }}/latest"
    src:  "{{ item.stdout }}"
    state: link
  when: "dcos['version'] is version('1.9', '>=')"
  loop: "{{upgrade_dir_hash.results}}"

# vvv serve files via http vvv

- name: Serve bootstrap files via dockerized httpd
  docker_container:
    name: bootstrapnginx
    image: nginx
    ports:
     - "8080:80"
    volumes:
      - "{{ download_base_dir }}:/usr/share/nginx/html:ro"
